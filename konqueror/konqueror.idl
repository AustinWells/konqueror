// -*-idl-*-
#ifndef __konqueror_idl__
#define __konqueror_idl__

#include <kom.idl>
#include <openparts.idl>
#include <openparts_ui.idl>

module Konqueror
{
  const string KONQ_NAMING = "KBase/Konqueror/Application";

  typedef sequence<string> StrList;

  struct URLRequest
  {
    string url;
    boolean reload /* = false */ ;
    long xOffset /* = 0 */ ;
    long yOffset /* = 0 */ ;
  };
    
  struct Transfer
  {
    string source;
    string destination;
  };
  typedef Transfer EventNewTransfer;
  const string eventNewTransfer = "Konqueror/NewTransfer";

  /*
   * This event is mapped by Konqueror's implementation of the MainView
   * interface as well as by all the views.
   * (we use an event to open an URL instead of a simple method openURL (or
   * similar) because this way you can install your own custom URL filters :-)
   */
  typedef URLRequest EventOpenURL;
  const string eventOpenURL = "Konqueror/OpenURL";

  interface View : OpenParts::Part
  {
    
    /*
     * A full featured Konqueror View has to map the eventOpenURL event (which 
     * has a structure EventOpenURL as parameter)
     *
     * In addition it may implement/emit the following signals:
     *      - signal void openURL( in URLRequest url );
     *      - signal void started( in OpenParts::Id id, in string url );
     *      - signal void completed( in OpenParts::Id id );
     *      - signal void canceled( in OpenParts::Id id );
     *      - signal void setStatusBarText( in wstring text );
     *      - signal void setLocationBarURL( in OpenParts::Id id, in string url );
     *      - signal void createNewWindow( in string url );
     */
     
    string url();
    long xOffset();
    long yOffset();
    
    void stop();
    
    /*
     * returns a name for the view (for example just like "KMailFolderView" or
     * "KonquerorHTMLView")
     */
    string viewName();
    
    /*
     * The three events defined below can be mapped by a view to provide view
     * specific GUI elements.
     * note: If the menu/toolbar provided in the event structure is nil this
     * means that the gui element (menu/toolbar) is meant to be cleared and
     * the view should free all references to any related menus/toolbars.
     */

    struct EventFillMenu
    {
      OpenPartsUI::Menu menu;
      boolean create; // add items to menu if true, remove if false
    };

    struct EventCreateViewToolBar
    {
      OpenPartsUI::ToolBar toolBar;
    };

    const string eventFillMenuEdit = "Konqueror/GUI/fillMenu/Edit";
    const string eventFillMenuView = "Konqueror/GUI/fillMenu/View";
    const string eventCreateViewToolBar = "Konqueror/GUI/createViewToolBar";
  };

  typedef sequence<View> ViewList;

  interface PrintingExtension
  {
    void print();
    //TO BE IMPROVED!
  };
  
  interface KfmIconView : View
  {
    slot void slotShowDot();
    slot void slotLargeIcons();
    slot void slotSmallIcons();
    slot void slotSelect();
    slot void slotSelectAll();
  };

  interface KfmTreeView : View
  {
    slot void slotShowDot();
    slot void slotReloadTree();
  };
  
  interface HTMLView : View, PrintingExtension
  {

    struct HTMLDocumentRequest
    {
      wstring url;
      boolean reload;
      long xOffset;
      long yOffset;
      string postData;
    };
    typedef HTMLDocumentRequest EventRequestDocument;
    const string eventRequestDocument = "Konqueror/HTMLView/DocumentRequest";
    

    struct HTMLPageLinkInfo
    {
      wstring url;
      wstring name;
    };
    typedef sequence<HTMLPageLinkInfo> HTMLPageLinkInfoList;
  
    HTMLPageLinkInfoList pageLinkInfoList();
  
    slot void saveDocument();
    slot void saveFrame();
    slot void saveBackground();
    slot void viewDocumentSource();
    slot void viewFrameSource();
    
    void beginDoc( in wstring url, in long dx, in long dy );
    void writeDoc( in string data );
    void endDoc();
    void parseDoc();
  };
  
  interface PartView : View
  {
    void setPart( in OpenParts::Part part );
    OpenParts::Part part();
    
    slot void detachPart();
  };

  interface TxtView : View, PrintingExtension
  {
    slot void slotSelectAll();
  };

  interface MainView : OpenParts::Part
  {
    // Position is relative to activeView(); above and below create a new row

    void setActiveView( in OpenParts::Id id );
    View activeView();
    OpenParts::Id activeViewId();
    ViewList viewList();

    slot void openURL( in URLRequest url );    
    
    slot void setStatusBarText( in wstring text );
    slot void setLocationBarURL( in OpenParts::Id id, in string url );
    
    slot void createNewWindow( in string url );

    // File menu
    slot void slotNewWindow();
    slot void slotRun();
    slot void slotTerminal();
    slot void slotOpenLocation();
    slot void slotToolFind();
    slot void slotPrint();

    // Edit menu
    slot void slotCopy();
    slot void slotPaste();
    slot void slotTrash();
    slot void slotDelete();

    // View menu
    slot void slotSplitView();
    slot void slotRowAbove();
    slot void slotRowBelow();
    slot void slotRemoveView();
    slot void slotShowHTML();
    slot void slotLargeIcons();
    slot void slotSmallIcons();
    slot void slotTreeView();
    slot void slotReload();
    slot void slotStop();

    // Go menu
    slot void slotUp();
    slot void slotBack();
    slot void slotForward();
    slot void slotHome();
    slot void slotShowCache();
    slot void slotShowHistory();
    slot void slotEditMimeTypes();
    slot void slotEditApplications();

    // Options menu
    slot void slotShowMenubar();
    slot void slotShowStatusbar();
    slot void slotShowToolbar();
    slot void slotShowLocationbar();
    slot void slotSaveSettings();
    slot void slotSaveLocalSettings();
    // TODO : cache submenu
    slot void slotConfigureFileManager();
    slot void slotConfigureBrowser();
    slot void slotConfigureKeys();
    slot void slotReloadPlugins();

    // Help menu
    slot void slotHelpContents();
    slot void slotHelpAbout();

    slot void slotURLEntered();

    slot void slotFileNewActivated( in long id );
    slot void slotFileNewAboutToShow();	
  
    slot void slotBookmarkSelected( in long id );
    slot void slotEditBookmarks();

    slot void slotURLStarted( in OpenParts::Id id, in string url );
    slot void slotURLCompleted( in OpenParts::Id id );
  };
  
  interface MainWindow : OpenParts::MainWindow
  {
    MainView mainView();
  };

  interface ViewFactory
  {
    View create();
  };
    
  interface Application : OpenParts::Application
  {
    MainWindow createMainWindow( in string url );
    MainView createMainView(); // without mainwindow, this is nonsense
    
    KfmIconView createKfmIconView();
    HTMLView createHTMLView();
    KfmTreeView createKfmTreeView();
    PartView createPartView();
    TxtView createTxtView();
  };
  
};

#endif
