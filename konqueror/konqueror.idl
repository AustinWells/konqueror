// -*-idl-*-
#ifndef __konqueror_idl__
#define __konqueror_idl__

#include <kom.idl>
#include <openparts.idl>
#include <openparts_ui.idl>

module Konqueror
{

  typedef sequence<string> StrList;

  struct URLRequest
  {
    string url;
    boolean reload /* = false */ ;
    long xOffset /* = 0 */ ;
    long yOffset /* = 0 */ ;
  };
    
  /*
   * This event is mapped by Konqueror's implementation of the MainView
   * interface as well as by all the views.
   * (we use an event to open an URL instead of a simple method openURL (or
   * similar) because this way you can install your own custom URL filters :-)
   */
  typedef URLRequest EventOpenURL;
  const string eventOpenURL = "Konqueror/OpenURL";

  interface View : OpenParts::Part
  {
    struct MenuPopupRequest
    {
      long x;
      long y;
      StrList urls;
      long mode;      
      boolean isLocalFile;      
    };

    struct HistoryEntry
    {
      string url;
      any data;
    };
    
    /*
     * A full featured Konqueror View has to map the eventOpenURL event (which 
     * has a structure EventOpenURL as parameter)
     *
     * In addition it may implement/emit the following signals:
     *      - signal void openURL( in Konqueror::URLRequest url );
     *      - signal void started( in string url );
     *      - signal void completed();
     *      - signal void canceled();
     *      - signal void setStatusBarText( in string text );
     *      - signal void setLocationBarURL( in string url );
     *      - signal void createNewWindow( in string url );
     *      - signal void popupMenu( in MenuPopupRequest popup );
     */
     
    string url();
    
    void stop();

    HistoryEntry saveState();
    void restoreState( in HistoryEntry history );
    
    /*
     * returns a name for the view (for example just like "KMailFolderView" or
     * "KonquerorHTMLView")
     */
    string viewName();
        
    /*
     * The two below defined events can be mapped by a view to provide view
     * specific GUI elements.
     * note: If the menu/toolbar provided in the event strcture is nil this
     * means that the gui element (menu/toolbar) is meant to be cleared and
     * you should free all references to any related menus/toolbars.
     */

    struct EventCreateViewMenu
    {
      OpenPartsUI::Menu menu;
    };

    struct EventCreateViewToolBar
    {
      OpenPartsUI::ToolBar toolBar;
    };
  
    const string eventCreateViewMenu = "Konqueror/GUI/createViewMenu";
    const string eventCreateViewToolBar = "Konqueror/GUI/createViewToolBar";
  };

  typedef sequence<View> ViewList;
  
  /*
   * see kio_interface.h in libkio for further information
   */
  struct UDSAtom
  {
    string m_str;
    long m_long;
    unsigned long m_uds;
  };
  typedef sequence<UDSAtom> UDSEntry;
  
  interface KfmIconTreeViewItem
  {
    string url();
    
    boolean isMarked();
    void mark();
    void unmark();
    
    UDSEntry udsEntry();
    
    boolean acceptsDrops( in StrList formats );
    string mimeType();
  };
  
  interface KfmIconViewItem : KfmIconTreeViewItem
  {
  };
  
  interface KfmIconView : View
  {
//    typedef sequence<IconViewItem> IconViewItemList;
    
//    IconViewItemList selectedItems();
    
//    void updateDirectory();

    slot void slotLargeIcons();
    slot void slotSmallIcons();
  };

  interface KfmTreeViewItem : KfmIconTreeViewItem
  {
    string name();
  };
    
  interface KfmTreeView : View
  {
  };
  
  interface HTMLView : View
  {
    slot void testIgnore();
  };
  
  interface PartView : View
  {
    void setPart( in OpenParts::Part part );
    OpenParts::Part part();
    
    slot void detachPart();
  };

  enum NewViewPosition { above, below, left, right };

  interface MainView : OpenParts::Part
  {
    // Position is relative to activeView(); above and below create a new row
    void insertView( in View view, in NewViewPosition newViewPosition);
    void setActiveView( in OpenParts::Id id );
    View activeView();
    ViewList viewList();
    void removeView( in OpenParts::Id id );

    slot void openURL( in URLRequest url );    
    
    slot void setStatusBarText( in string text );
    slot void setLocationBarURL( in string url );
    slot void setUpURL( in string url );
    
    slot void createNewWindow( in string url );
    slot void popupMenu( in View::MenuPopupRequest popup );

    string currentTitle();
    string currentURL();
        
    slot void slotSplitView();
    slot void slotRowAbove();
    slot void slotRowBelow();
    slot void slotShowDot();
    slot void slotLargeIcons();
    slot void slotSmallIcons();
    slot void slotTreeView();
    slot void slotHTMLView();
    slot void slotSaveGeometry();
    slot void slotShowCache();
    slot void slotShowHistory();
    slot void slotOpenLocation();
    slot void slotConfigureKeys();
    slot void slotAboutApp();

    slot void slotURLEntered();
  
    slot void slotStop();
    slot void slotNewWindow();
    slot void slotUp();
    slot void slotHome();
    slot void slotBack();
    slot void slotForward();
    slot void slotReload();

    slot void slotFileNewActivated( in long id );
    slot void slotFileNewAboutToShow();	
  
    slot void slotBookmarkSelected( in long id );
    slot void slotEditBookmarks();
    
    slot void slotURLStarted( in string url );
    
    slot void slotStopAnimation();
  };
  
  interface MainWindow : OpenParts::MainWindow
  {
    MainView mainView();
  };

  interface ViewFactory
  {
    View create();
  };
    
  interface Application : OpenParts::Application
  {
    MainView createMainView();
    
    KfmIconView createKfmIconView();
    HTMLView createHTMLView();
    KfmTreeView createKfmTreeView();
    PartView createPartView();
  };
  
};

#endif
