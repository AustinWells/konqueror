/*  This file is part of the KDE project
    Copyright (C) 1999 Simon Hausmann <hausmann@kde.org>
    Copyright (C) 1999 David Faure <faure@kde.org>
    Copyright (C) 1999 Torben Weis <weis@kde.org>
 
    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.
 
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
 
    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 
*/ 

#ifndef __konqueror_idl__
#define __konqueror_idl__ $Id$

#include <browser.idl>

module Konqueror
{
 
  interface KfmIconView : Browser::View
  {
    slot void slotShowDot();
    slot void slotLargeIcons();
    slot void slotSmallIcons();
    slot void slotSelect();
    slot void slotSelectAll();
  };

  interface KfmTreeView : Browser::View
  {
    slot void slotShowDot();
    slot void slotReloadTree();
  };
  
  interface HTMLView : Browser::View, Browser::PrintingExtension
  {

    struct HTMLDocumentRequest
    {
      wstring url;
      boolean reload;
      long xOffset;
      long yOffset;
      string postData;
    };
    typedef HTMLDocumentRequest EventRequestDocument;
    const string eventRequestDocument = "Konqueror/HTMLView/DocumentRequest";
    

    struct HTMLPageLinkInfo
    {
      wstring url;
      wstring name;
    };
    typedef sequence<HTMLPageLinkInfo> HTMLPageLinkInfoList;
  
    HTMLPageLinkInfoList pageLinkInfoList();
  
    slot void saveDocument();
    slot void saveFrame();
    slot void saveBackground();
    slot void viewDocumentSource();
    slot void viewFrameSource();

    slot void slotLoadImages();
    
    void beginDoc( in wstring url, in long dx, in long dy );
    void writeDoc( in string data );
    void endDoc();
    void parseDoc();
  };
  
  interface TxtView : Browser::View, Browser::PrintingExtension
  {
    slot void slotSelectAll();
    slot void slotEdit();
    slot void slotFixedFont();
    slot void slotSearch();
  };

  interface MainView : OpenParts::Part
  {
    void setActiveView( in OpenParts::Id id );
    Browser::View activeView();
    OpenParts::Id activeViewId();
    Browser::ViewList viewList();

    slot void openURL( in Browser::URLRequest url );    
    
    slot void setStatusBarText( in wstring text );
    slot void setLocationBarURL( in OpenParts::Id id, in string url );
    
    slot void createNewWindow( in string url );

    // File menu
    slot void slotNewWindow();
    slot void slotRun();
    slot void slotTerminal();
    slot void slotOpenLocation();
    slot void slotToolFind();
    slot void slotPrint();

    // Edit menu
    slot void slotCopy();
    slot void slotPaste();
    slot void slotTrash();
    slot void slotDelete();

    // View menu
    slot void slotSplitViewHorizontal();
    slot void slotSplitViewVertical();
    slot void slotRemoveView();
    slot void slotShowHTML();
    slot void slotLargeIcons();
    slot void slotSmallIcons();
    slot void slotTreeView();
    slot void slotReload();
    slot void slotStop();

    // Go menu
    slot void slotUp();
    slot void slotBack();
    slot void slotForward();
    slot void slotHome();
    slot void slotShowCache();
    slot void slotShowHistory();
    slot void slotEditMimeTypes();
    slot void slotEditApplications();

    // Options menu
    slot void slotShowMenubar();
    slot void slotShowStatusbar();
    slot void slotShowToolbar();
    slot void slotShowLocationbar();
    slot void slotSaveSettings();
    slot void slotSaveLocalSettings();
    // TODO : cache submenu
    slot void slotConfigureFileManager();
    slot void slotConfigureBrowser();
    slot void slotConfigureKeys();
    slot void slotReloadPlugins();
    slot void slotSaveViewProfile();
    slot void slotViewProfileActivated( in long id );

    // Help menu
    slot void slotHelpContents();
    slot void slotHelpAbout();

    slot void slotURLEntered( in wstring url );

    slot void slotFileNewActivated( in long id );
    slot void slotFileNewAboutToShow();	
    
    slot void slotMenuEditAboutToShow();
    slot void slotMenuViewAboutToShow();
  
    slot void slotBookmarkSelected( in long id );
    slot void slotEditBookmarks();

    slot void slotURLStarted( in OpenParts::Id id, in string url );
    slot void slotURLCompleted( in OpenParts::Id id );
  };
  
  interface MainWindow : OpenParts::MainWindow
  {
    MainView mainView();
  };

  interface Application : OpenParts::Application
  {
    MainWindow createMainWindow( in string url );
    MainView createMainView(); // without mainwindow, this is nonsense
    
    KfmIconView createKfmIconView();
    HTMLView createHTMLView();
    KfmTreeView createKfmTreeView();
    TxtView createTxtView();
  };
  
};

#endif
